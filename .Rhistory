start=start.seconds,
end=end.seconds,
period=interval*60)
interval <- 5
args <- list(currencyPair=pair,
start=start.seconds,
end=end.seconds,
period=interval*60)
args
paste0(args, collapse = "&")
paste0(names(args), args, collapse = "&")
paste(names(args), args, sep="=",collapse = "&")
command <- "returnChartData"
c("command"=command, args)
args <- c("command"=command, args)
combined.args <- paste(names(args), args, sep="=",collapse = "&")
combined.args
args=list()
args <- c("command"=command, args)
combined.args <- paste(names(args), args, sep="=",collapse = "&")
combined.args
currency <- "BTC"
command <- "returnLoanOrders"
config.specs <- list(currency=currency)
command.result <- api.poloniex.public(command=command, args=config.specs)
source('~/Documents/GitHub/altfund/poloniexAPI.R')
command.result <- api.poloniex.public(command=command, args=config.specs)
head(command.result)
head(fromJSON(command.result))
str(command.result)
head(fromJSON(command.result$offers))
head(ldply(command.result$offers, data.frame))
ldply(command.result$offers, data.frame)
ldply(command.result$demands, data.frame)
ldply(returnLoadOrders(currency="ETH")$offers,data.frame)
source('~/Documents/GitHub/altfund/poloniexAPI.R')
ldply(returnLoadOrders(currency="ETH")$offers,data.frame)
ldply(returnLoanOrders(currency="ETH")$offers,data.frame)
ldply(returnLoanOrders(currency="DASH")$offers,data.frame)
ldply(returnLoanOrders(currency="DOGE")$offers,data.frame)
account <- NULL
command <- "returnAvailableAccountBalances"
config.specs <- list(account=account)
command.result <- api.poloniex(command=command, args=config.specs)
command.result
command.result <- api.poloniex(command=command, args=config.specs)
command.result
command.result$margin
investment.pairs <- loadInvestmentUniverse()$asset
investment.pairs
(investment.pairs %in% "USD_BTC")
!(investment.pairs %in% "USD_BTC")
investment.pairs[!(investment.pairs %in% "USD_BTC")]
investment.pairs <- investment.pairs[!(investment.pairs %in% "USD_BTC")]
investment.universe <- loadInvestmentUniverse()
investment.universe[!is.restricted,]
investment.universe[!investment.universe$is.restricted,]
investment.universe[!investment.universe$is.restricted && investment.universe$exchange=="poloniex",asset]
investment.universe[!investment.universe$is.restricted && investment.universe$exchange=="poloniex","asset"]
investment.pairs <- investment.universe[!investment.universe$is.restricted && investment.universe$exchange=="poloniex","asset"]
poloniex.currencies <- c("BTC", "BTS", "CLAM", "DOGE", "DASH", "LTC", "MAID", "STR", "XMR", "XRP", "ETH", "FCT")
length(poloniex.currencies)
poloniex.balances <- returnAvailableAccountBalances()
source('~/Documents/GitHub/altfund/poloniexAPI.R')
poloniex.balances <- returnAvailableAccountBalances()
ls(poloniex.balances)
sapply(poloniex.portfolios, function(x) poloniex.balances[[x]])
poloniex.currencies <- c("BTC", "BTS", "CLAM", "DOGE", "DASH", "LTC", "MAID", "STR", "XMR", "XRP", "ETH", "FCT")
poloniex.portfolios <- c("exchange", "margin", "lending")
sapply(poloniex.portfolios, function(x) poloniex.balances[[x]])
expand.grid(poloniex.portfolios, poloniex.currencies)
expand.grid(portfolio=poloniex.portfolios, currency=poloniex.currencies)
poloniex.summary <- expand.grid(portfolio=poloniex.portfolios, currency=poloniex.currencies)
apply(poloniex.summary, 1, function(x) print(x))
apply(poloniex.summary, 1, function(x) print(x$portfolio))
apply(poloniex.summary, 2, function(x) print(x$portfolio))
apply(poloniex.summary, 2, function(x) print(x[[portfolio]]))
apply(poloniex.summary, 2, function(x) print(x[,"portfolio"]))
apply(poloniex.summary, 1, function(x) print(x[,"portfolio"]))
apply(poloniex.summary, 1, function(x) str(x))
apply(poloniex.summary, 2, function(x) str(x))
apply(poloniex.summary, 1, function(x) x["portfolio"])
apply(poloniex.summary, 1, function(x) poloniex.portfolios[x["portfolio"]][x["currency"]])
x <- apply(poloniex.summary, 1, function(x) x)[1]
x
x <- apply(poloniex.summary, 1, function(x) x)[,1]
x
x["portfolio"]
poloniex.portfolios[x["portfolio"]]
poloniex.portfolios[[x["portfolio"]]]
poloniex.balances[x["portfolio"]]
poloniex.balances[x["portfolio"]][x["currency"]]
poloniex.balances[[x["portfolio"]]][x["currency"]]
poloniex.balances[[x["portfolio"]]][[x["currency"]]]
apply(poloniex.summary, 1, function(x) poloniex.balances[[x["portfolio"]]][[x["currency"]]])
poloniex.summary
poloniex.balances$balance <- apply(poloniex.summary, 1, function(x) poloniex.balances[[x["portfolio"]]][[x["currency"]]])
poloniex.summary
poloniex.summary$balance <- apply(poloniex.summary, 1, function(x) poloniex.balances[[x["portfolio"]]][[x["currency"]]])
poloniex.summary
replace(poloniex.summary$balance , NULL, 0)
?replace()
replace(poloniex.summary$balance , is.null(poloniex.summary$balance), 0)
is.null(poloniex.summary$balance)
poloniex.summary
?is.null
balanceCalc <- function(x, poloniex.balances=NULL){
balance <- poloniex.balances[[x["portfolio"]]][[x["currency"]]]
return(ifelse(is.null(balance),0,balance))
}
poloniex.summary$balance <- apply(poloniex.summary, 1, balanceCalc, poloniex.balances=poloniex.balances)
poloniex.balances
apply(poloniex.summary, 1, balanceCalc, poloniex.balances=poloniex.balances)
?ifelse
poloniex.balances <- returnAvailableAccountBalances()
apply(poloniex.summary, 1, balanceCalc, poloniex.balances=poloniex.balances)
poloniex.summary <- expand.grid(portfolio=poloniex.portfolios, currency=poloniex.currencies)
apply(poloniex.summary, 1, balanceCalc, poloniex.balances=poloniex.balances)
poloniex.summary$balance <- apply(poloniex.summary, 1, balanceCalc, poloniex.balances=poloniex.balances)
str(poloniex.summary)
poloniex.summary <- expand.grid(portfolio=poloniex.portfolios, currency=poloniex.currencies, balance=NULL, stringsAsFactors = F)
poloniex.summary
poloniex.summary <- expand.grid(portfolio=poloniex.portfolios, currency=poloniex.currencies, balance=NA, stringsAsFactors = F)
poloniex.summary
poloniex.summary$balance <- apply(poloniex.summary, 1, balanceCalc, poloniex.balances=poloniex.balances)
poloniex.summary
poloniex.summary$balance <- apply(poloniex.summary, 1, balanceCalc, poloniex.balances=poloniex.balances)
poloniex.summary
?melt()
dcast(as.data.table(poloniex.summary), portfolio ~ currency)
dcast(as.data.table(poloniex.summary), portfolio ~ currency, value.var=balance)
dcast(as.data.table(poloniex.summary), portfolio ~ currency, value.var="balance")
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance")
margin.positions <- getMarginPosition()
margin.positions
complete.balances <- returnCompleteBalances(account = "all")
complete.balances
ls(complete.balances)
ls(complete.balances$BTC)
ls(complete.balances$BTC$onOrders)
complete.balances$BTC$onOrders
complete.balances$BTC$btcValue
complete.balances$BTC$available
complete.balances$XMR
margin.positions
ldply(margin.positions)
ldply(margin.positions, data.frame)
sum(ldply(margin.positions, data.frame)$total)
sum(as.numeric(ldply(margin.positions, data.frame)$total))
str(ldply(margin.positions, data.frame))
str(ldply(margin.positions, data.frame, stringsAsFactors=FALSE))
sum(as.numeric(ldply(margin.positions, data.frame, stringsAsFactors=FALSE)$total))
margin.positions <- ldply(getMarginPosition(), data.frame, stringsAsFactors=FALSE)
margin.positions
gsub("BTC_","",margin.positions$.id)
margin.holdings <- margin.positions[,c(".id",'amount')]
margin.holdings
colnames(margin.holdings) <- c("currency", "balance")
margin.holdings$portfolio <- "margin.holdings"
margin.holdings
margin.holdings$currency <- gsub("BTC_","",margin.holdings$currency)
margin.holdings
margin.holdings$balance <- as.numeric(margin.holdings$balance)
margin.holdings
btc.holdings <- data.frame(portfolio="margin.holdings", currency="BTC", balance=sum(as.numeric(margin.positions$total)))
btc.holdings
rbind(btc.holdings, margin.holdings)
margin.holdings <- rbind(btc.holdings, margin.holdings)
rbind(poloniex.summary, margin.holdings)
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance")
poloniex.summary <- rbind(poloniex.summary, margin.holdings)
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance")
active.loans <- returnActiveLoans()
active.loans
source('~/Documents/GitHub/altfund/poloniexAPI.R')
active.loans <- returnActiveLoans()
active.loans
ls(active.loans)
active.used.loans <- ldply(active.loans, data.frame, stringsAsFactors=F)
active.used.loans
active.used.loans <- ldply(active.loans$used, data.frame, stringsAsFactors=F)
active.used.loans
active.provided.loans <- ldply(active.loans$provided, data.frame, stringsAsFactors=F)
active.provided.loans
aggregate(active.used.loans, by="currency")
aggregate(active.used.loans, by="currency", fun="sum")
aggregate(active.used.loans, by="currency", FUN ="sum")
aggregate(active.used.loans, by=list("currency"), FUN ="sum")
?aggregate
aggregate(active.used.loans, list(currency=currency, amount=amount), sum())
aggregate(active.used.loans, list(currency=currency, amount=amount), sum)
aggregate(active.used.loans$amount, list(currency=currency), sum)
aggregate(active.used.loans$amount, list(currency=active.used.loans$currency), sum)
aggregate(as.numeric(active.used.loans$amount), list(currency=active.used.loans$currency), sum)
aggregate(balance=as.numeric(active.used.loans$amount), list(currency=active.used.loans$currency), sum)
aggregate(x=as.numeric(active.used.loans$amount), list(currency=active.used.loans$currency), sum)
names(borrowed, x)
borrowed <- aggregate(as.numeric(active.used.loans$amount), list(currency=active.used.loans$currency), sum)
names(borrowed, x)
?names
names(borrowed) <- c("currency", "balance")
borrowed
lent <- aggregate(as.numeric(active.provided.loans$amount), list(currency=active.provided.loans$currency), sum)
borrowed$porfolio <- "borrowed"
rbind(poloniex.summary, borrowed)
borrowed
poloniex.summary
rbind(poloniex.summary, margin.holdings[,names(poloniex.summary)])
rbind(poloniex.summary, borrowed[,names(poloniex.summary)])
names(poloniex.summary)
names(borrowed)
borrowed <- aggregate(as.numeric(active.used.loans$amount), list(currency=active.used.loans$currency), sum)
names(borrowed) <- c("currency", "balance")
borrowed$portfolio <- "borrowed"
rbind(poloniex.summary, borrowed)
poloniex.summary <- rbind(poloniex.summary, borrowed)
nrow(active.provided.loans) > 0
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance")
?dcast
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)
rowSum(dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0))
rowSums(dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0))
str(dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0))
str(dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0, fun.aggregate = as.numeric))
rowSums(dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0, fun.aggregate = as.numeric))
aggregate(x=poloniex.summary$balance, by=list(currency=poloniex.summary$currency))
aggregate(x=poloniex.summary$balance, by=list(currency=poloniex.summary$currency), FUN=sum)
poloniex.summary$balance <- as.numeric(poloniex.summary$balance)
aggregate(x=poloniex.summary$balance, by=list(currency=poloniex.summary$currency), FUN=sum)
loadInvestmentUniverse()
if(nrow(active.provided.loans) > 0){
lent <- aggregate(as.numeric(active.provided.loans$amount), list(currency=active.provided.loans$currency), sum)
names(lent) <- c("currency", "balance")
lent$portfolio <- "lent"
} else {
lent <- data.frame(portfolio="lent", currency="BTC", balance=0)
}
lent
rbind(poloniex.summary, lent)
poloniex.summary <- rbind(poloniex.summary, lent)
poloniex.summary$balance <- as.numeric(poloniex.summary$balance)
aggregate(x=poloniex.summary$balance, by=list(currency=poloniex.summary$currency), FUN=sum)
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0[,c(currency, exchange, lending, margin, margin.holdings, borrowed, lent)])
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0[,list(currency, exchange, lending, margin, margin.holdings, borrowed, lent)])
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0[,list("currency", "exchange", lending, margin, margin.holdings, borrowed, lent)])
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0[,list("currency", "exchange", "lending", "margin", "margin.holdings", "borrowed", "lent")])
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[,list("currency", "exchange", "lending", "margin", "margin.holdings", "borrowed", "lent")]
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[list("currency", "exchange", "lending", "margin", "margin.holdings", "borrowed", "lent")]
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[c("currency", "exchange", "lending", "margin", "margin.holdings", "borrowed", "lent")]
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[,c("currency", "exchange", "lending", "margin", "margin.holdings", "borrowed", "lent")]
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[,c(currency, exchange, lending, margin, margin.holdings, borrowed, lent)]
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[c(currency, exchange, lending, margin, margin.holdings, borrowed, lent)]
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[list(currency, exchange, lending, margin, margin.holdings, borrowed, lent)]
dcast(as.data.table(poloniex.summary), currency ~ portfolio, value.var="balance", fill=0)[,list(currency, exchange, lending, margin, margin.holdings, borrowed, lent)]
loan.offers <- returnOpenLoanOffers()
open.orders <- returnOpenOrders()
loan.offers
open.orders
setwd("~/Documents/GitHub/altfund")
source("systemConfig.R")
getwd()
1/6.
currency.names <- c("BTC", "FCT")
print(paste0("Canceling open loan offers for ",currencies, collapse = " "))
currencies <- c("BTC", "FCT")
print(paste0("Canceling open loan offers for ",currencies, collapse = " "))
print(paste0("Canceling open loan offers for ",paste0(currencies, collapse = " ")))
open.offers <- returnOpenLoanOffers()
open.offers
for(currency in names(open.offers)){
if(currency %in% currencies){
offers <- open.offers[[currency]]
for(offer in offers){
offer.number <- offer$orderNumber
if (!is.null(offer.number)){
result <- cancelLoanOffer(orderNumber=offer.number)
print(result)
Sys.sleep(0.2)
}
}
}
}
"BTC" %in% currencies
lending.currency <- "BTC"
max.lending.balance <- 0.05
lending.book <- returnLoanOrders(currency=lending.currency)
lending.book
ls(lending.book)
ldply(lending.book$offers, data.frame, stringsAsFactors=F)
open.offers <- ldply(lending.book$offers, data.frame, stringsAsFactors=F)
open.demands <- ldply(lending.book$demands, data.frame, stringsAsFactors=F)
open.demands
all.lending.book <- returnLoanOrders(currency=NULL)
ls(all.lending.book)
all.lending.book <- returnLoanOrders(currency="all")
ls(all.lending.book)
all.lending.book
active.loans <- returnActiveLoans()
active.loans
ls(active.loans)
ls(active.loans$provided)
ls(active.loans$used
ls(active.loans$used)
active.loans$used
ldply(active.loans$used, data.frame)
ldply(active.loans$provided, data.frame)
current.lending.balance <- 0
max(0,max.lending.balance - current.lending.balance)
if(0){print("yes")}
if(0.4){print("yes")}
if(-1){print("yes")}
open.offers
open.offers[open.offers$rangeMin>=max.length,]
max.length <- 2
open.offers[open.offers$rangeMin>=max.length,]
open.offers[open.offers$rangeMin<=max.length,]
active.provided.loans
active.provided.loans <- ldply(returnActiveLoans()$provided, data.frame, stringsAsFactors=F)
active.provided.loans
active.provided.loans$rate
nrow(active.provided.loans$rate)
open.demands <- ldply(lending.book$demands, data.frame, stringsAsFactors=F)
open.demands <- open.demands[open.demands$rangeMin<=max.length,]
open.demands
sum(open.offers$amount)
sum(as.numeric(open.offers$amount))
satoshi <- 10^-8
satoshi
?poisson()
plot(as.numeric(open.offers$rate), as.numeric(open.offers$amount))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), vline=.05 * sum(as.numeric(open.offers$amount)))
?plot
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l")
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(v=.05 * sum(as.numeric(open.offers$amount)))
.05 * sum(as.numeric(open.offers$amount))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(h=.05 * sum(as.numeric(open.offers$amount)))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(h=.05 * sum(as.numeric(open.offers$amount))) + abline(h=.95 * sum(as.numeric(open.offers$amount)))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(h=.05 * sum(as.numeric(open.offers$amount))) + abline(h=.90 * sum(as.numeric(open.offers$amount)))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(h=.10 * sum(as.numeric(open.offers$amount))) + abline(h=.90 * sum(as.numeric(open.offers$amount)))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(h=.075 * sum(as.numeric(open.offers$amount))) + abline(h=.925 * sum(as.numeric(open.offers$amount)))
plot(density(as.numeric(open.offers$rate)))
?density
density(as.numeric(open.offers$rate))
quantile(as.numeric(open.offers$rate), c(.075, 1-.075))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(h=quantile(as.numeric(open.offers$amount), .075)) + abline(h=quantile(as.numeric(open.offers$amount), .925))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(h=quantile(as.numeric(open.offers$amount), .1)) + abline(h=quantile(as.numeric(open.offers$amount), .9))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(v=quantile(as.numeric(open.offers$amount), .1)) + abline(v=quantile(as.numeric(open.offers$amount), .9))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(v=quantile(as.numeric(open.offers$rate), .1)) + abline(v=quantile(as.numeric(open.offers$rate), .9))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(v=quantile(as.numeric(open.offers$rate), .075)) + abline(v=quantile(as.numeric(open.offers$rate), .925))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(v=quantile(as.numeric(open.offers$rate), .05)) + abline(v=quantile(as.numeric(open.offers$rate), .95))
plot(as.numeric(open.offers$rate), cumsum(as.numeric(open.offers$amount)), type = "l") + abline(v=quantile(as.numeric(open.offers$rate), .15)) + abline(v=quantile(as.numeric(open.offers$rate), .85))
plot(density(as.numeric(open.offers$rate)))) + abline(v=quantile(as.numeric(open.offers$rate), .15)) + abline(v=quantile(as.numeric(open.offers$rate), .85))
plot(density(as.numeric(open.offers$rate))) + abline(v=quantile(as.numeric(open.offers$rate), .15)) + abline(v=quantile(as.numeric(open.offers$rate), .85))
as.numeric(open.offers$rate) * as.numeric(open.offers$amount)
(as.numeric(open.offers$rate) * as.numeric(open.offers$amount))/sum(as.numeric(open.offers$amount))
plot(density((as.numeric(open.offers$rate) * as.numeric(open.offers$amount))/sum(as.numeric(open.offers$amount))))
?range
?seq
seq(from=offer.range[1], to=offer.range[2], length.out = order.distributions)
offer.range <- quantile(as.numeric(open.offers$rate), c(dust.percent.min, dust.percent.max))
dust.percent.min <- 0.075 #5%
dust.percent.max <- 1 - dust.percent.min
order.distributions <- 5 # number of orders to place
max.lending.rate <- .05
seq(from=offer.range[1],
to=min(max.lending.rate,offer.range[2])
, length.out = order.distributions)
offer.range <- quantile(as.numeric(open.offers$rate), c(dust.percent.min, dust.percent.max))
seq(from=offer.range[1],
to=min(max.lending.rate,offer.range[2])
, length.out = order.distributions)
rep(balance.to.lend/order.distributions, order.distributions)
balance.to.lend <- max(0,max.lending.balance - current.lending.balance)
rep(balance.to.lend/order.distributions, order.distributions)
round(rep(balance.to.lend/order.distributions, order.distributions), satoshi)
log10(satoshi)
round(rep(balance.to.lend/order.distributions, order.distributions), log10(satoshi))
round(rep(balance.to.lend/order.distributions, order.distributions), -log10(satoshi))
offers.to.make <- data.frame(lending.rate=seq(from=offer.range[1],
to=min(max.lending.rate,offer.range[2]),
length.out = order.distributions),
amount = round(rep(balance.to.lend/order.distributions, order.distributions), -log10(satoshi)))
offers.to.make
i <- 1
offer.row <- offers.to.make[i,]
offer.row
offer.row[,amount]
offer.row[,"amount"]
as.numeric(offer.row[,"amount"])
satoshi <- 10^-8
lending.currency <- "BTC"
max.lending.balance <- 0.05
max.length <- 2
dust.percent.min <- 0.075 #5%
dust.percent.max <- 1 - dust.percent.min
order.distributions <- 5 # number of orders to place
max.lending.rate <- .05
cancelOpenLoanOffers(currencies = lending.currency)
active.provided.loans <- ldply(returnActiveLoans()$provided, data.frame, stringsAsFactors=F)
if(nrow(active.provided.loans) > 0){
#
} else {
current.lending.balance <- 0
}
balance.to.lend <- max(0,max.lending.balance - current.lending.balance)
balance.to.lend
cancelOpenLoanOffers <- function(currencies=NULL){
print(paste0("Canceling open loan offers for ",paste0(currencies, collapse = " ")))
open.offers <- returnOpenLoanOffers()
for(currency in names(open.offers)){
if(currency %in% currencies){
offers <- open.offers[[currency]]
for(offer in offers){
offer.number <- offer$orderNumber
if (!is.null(offer.number)){
result <- cancelLoanOffer(orderNumber=offer.number)
print(result)
Sys.sleep(0.2)
}
}
}
}
}
lending.book <- returnLoanOrders(currency=lending.currency)
open.offers <- ldply(lending.book$offers, data.frame, stringsAsFactors=F)
open.offers <- open.offers[open.offers$rangeMin<=max.length,]
# open.demands <- ldply(lending.book$demands, data.frame, stringsAsFactors=F)
# open.demands <- open.demands[open.demands$rangeMin<=max.length,]
# if(!is.null(open.demands) && nrow(open.demands) > 0){
#
# }
offer.range <- quantile(as.numeric(open.offers$rate), c(dust.percent.min, dust.percent.max))
offers.to.make <- data.frame(lending.rate=seq(from=offer.range[1],
to=min(max.lending.rate,offer.range[2]),
length.out = order.distributions),
amount = round(rep(balance.to.lend/order.distributions, order.distributions), -log10(satoshi)))
offers.to.make
for(i in 1:nrow(offers.to.make)){
offer.row <- offers.to.make[i,]
offer.response <- createLoanOffer(currency=lending.currency, amount=offer.row[,"amount"], duration=2,
autoRenew=0, lendingRate=offer.row[,"lending.rate"])
print(offer.response$orderID)
Sys.sleep(.2)
}
open.loan.offers <- returnOpenLoanOffers()
open.loan.offers
active.provided.loans <- ldply(returnActiveLoans()$provided, data.frame, stringsAsFactors=F)
active.provided.loans
library(dplyr)
grouped_mtcars = group_by(mtcars, cyl)
grouped_mtcars
summarize(grouped_mtcars, tot.disp = sum(disp))
?join
?mutate
mtcars %>%
group_by(cyl) %>%
summarise (disp.total = sum(disp)) %>%
mutate( disp.share = disp/disp.total
)
?summarise
head(mtcars)
grouped_mtcars
mtcars %>%
group_by(cyl) %>%
summarise(disp.total = sum(disp)) %>%
mutate( disp.share = disp/disp.total) %>%
ungroup()
grouped_mtcars = group_by(mtcars, cyl)
tot_disp = summarize(grouped_mtcars, disp.total = sum(disp))
mutated_disp = mutate(tot_disp, disp.share = disp/disp.total)
tot_disp
ungroup(tot_disp)
tot_disp = summarize(grouped_mtcars, disp.total = sum(disp), cyl=cyl, disp=disp)
grouped_mtcars = group_by(mtcars, cyl)
tot_disp = summarize(grouped_mtcars, disp.total = sum(disp), cyl=cyl, disp=disp)
tot_disp = summarize(grouped_mtcars, disp.total = sum(disp))
left_join(mtcars, tot_disp, by="cyl")
str(mtcars)
row.names(mtcars)
mtcars$name <- row.names(mtcars)
grouped_mtcars = group_by(mtcars, cyl)
tot_disp = summarize(grouped_mtcars, disp.total = sum(disp))
tot_disp = summarize(group_by(mtcars, cyl), disp.total = sum(disp))
left_join(mtcars, tot_disp, by="cyl")
mutated_disp = mutate(tot_disp, disp.share = disp/disp.total)
tot_disp = left_join(mtcars, summarize(group_by(mtcars, cyl), disp.total = sum(disp)), by="cyl")
mutated_disp = mutate(tot_disp, disp.share = disp/disp.total)
mutated_disp
mutated_disp[,c("disp.share")]
mutated_disp[,list("disp.share")]
mutated_disp[,("name","disp.share")]
mutated_disp[,c("name","disp.share")]
mutated_disp[,c("name","cyl","disp","disp.share")]
mutated_disp = mutate(mutated_disp, disp.share = paste0(round(100 * disp.share, 0), "%"))
mutated_disp
print(mutated_disp[,c("name","cyl","disp","disp.share")])
print(head(result))
result <- mutated_disp[,c("name","cyl","disp","disp.share")]
print(head(result))
ungroup(mutated_disp)
library(shiny); print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
print(source('shiny_test.R')$value)
